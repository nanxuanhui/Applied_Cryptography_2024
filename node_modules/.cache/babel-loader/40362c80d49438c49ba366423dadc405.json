{"remainingRequest":"/Users/nanxuan/Desktop/vue-frontend/node_modules/babel-loader/lib/index.js!/Users/nanxuan/Desktop/vue-frontend/node_modules/eslint-loader/index.js??ref--13-0!/Users/nanxuan/Desktop/vue-frontend/src/assets/RSA.js","dependencies":[{"path":"/Users/nanxuan/Desktop/vue-frontend/src/assets/RSA.js","mtime":1710256297000},{"path":"/Users/nanxuan/Desktop/vue-frontend/node_modules/cache-loader/dist/cjs.js","mtime":1712020702053},{"path":"/Users/nanxuan/Desktop/vue-frontend/node_modules/babel-loader/lib/index.js","mtime":1712020702448},{"path":"/Users/nanxuan/Desktop/vue-frontend/node_modules/eslint-loader/index.js","mtime":1712020702117}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyIGZyb20gIi9Vc2Vycy9uYW54dWFuL0Rlc2t0b3AvdnVlLWZyb250ZW5kL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuc29ydC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5rZXlzLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuY29uY2F0LmpzIjsKaW1wb3J0IEpTRW5jcnlwdCBmcm9tICdqc2VuY3J5cHQnOwppbXBvcnQgeyBLSlVSLCBoZXh0b2I2NCwgYjY0dG9oZXggfSBmcm9tICdqc3JzYXNpZ24nOyAvLyBDcmVhdGUgdGhlIGVuY3J5cHRpb24gb2JqZWN0IGFuZCBzZXQgdGhlIGtleS4KCnZhciBjcnlwdG9yID0gbmV3IEpTRW5jcnlwdCgpOyAvLyAtLS0tLUJFR0lOIFJTQSBQUklWQVRFIEtFWS0tLS0tCgp2YXIgUFJJVkFURV9LRVkgPSAiLS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tXG5NSUlFdmdJQkFEQU5CZ2txaGtpRzl3MEJBUUVGQUFTQ0JLZ3dnZ1NrQWdFQUFvSUJBUUR5U2YzVkhiazgxdWtUXG43UEwvbE51cVZIZ0ZMMm11VzltQ0NGNkRxd3dmcG9yanN0TGczNkJSL0E4N2J6emZlclB1TVZxQ3BTcEpBWHU1XG45Q3VScDVsQ0IzeUFORjgzOUNIbXNsT3F3bWxGZVZvVnZudWl0ZGNWaDlxdkRtbjFUYTJHNGQ0N0tMN1pWTldhXG44Uk11bFd4L3ltcGRNbk9KSWc0OTNZZ01NMllQclcvUmgzK0ZScjhzcXJraW1XRitibmx6R29RTWNqOG5TUytKXG5Lck5MdFlJSjR4MzZvMU1sOFNVb3owenVYT29MM080OXZuQSt0bjZJdGlQY2R1VjlhNk43aEhTT0Q5ZkVMNHlTXG5ZODR4cFZEZDhlSzZyblV0VXBpU0FOS3V4SWpQR05rNnprY2hQTCtMaG8zaVRPejBiWjI1aG1yR3R4ZzBKeXFOXG5uSlV3TVd2REFnTUJBQUVDZ2dFQWR1blR0OVlueFBGaFlaTW96RUdkOGlJVTZjNlVXcXZmdTg4cHZBdW1IcDZaXG5paG1KSUM4Qk8xdXZpaWNWUkVXdnE1YnphaTF2N0hiYTU3QXI5Z2ZBMDBSaldYVGF5dFo2RVFTeXhaczNHWTd1XG5wTDloWk1GRWQ5KytkNjVtV0t1d0lBUVpFd1h6YlMwU3pVSEdmVlYrODlVL2tOQWpIa25sblgxdHVUYzh2eklXXG50bmQ3MXpjTGFYTHp6cEpoZ2tFRUdjMUlvVzdEWWZGTXVQcmh0WGs3eSt6TElXRmJ2KzdHS0RGUkorZThLVHFyXG4vc3dFR1lzaEFtRDlDUmFxVzNPR2JMYjY1SU9FQ1pURFhGa1V1V1hTTmpmaU9ZVjM4blZvd3ExTklZSVFKeElIXG5Kd3NUb0NZZmdaUWNpRHZ0T2g2bFpBVjhiZ0crZ3dGb1BsZEFNME1mbVFLQmdRRDdLbHgydlB3SjFhOFV1RDd2XG5FVlNQbzVreVZyK0FmVC9DdVo1RTFQRmN5dDdLTVQ0VHNDV2pPT1N5NFZyUkhDeVJwWHdoQmpJMXVKVjRoVTRRXG5xRElwSklhbDlGMmVzT3ZMZFpNYTZ4UTFVVmhuNkhwT0ZqMzlGVDJQOEJBMVNZYURFQ2N5bGRyN3orNjNXc1FHXG5lQVpvZlNqYm9jYng3aUl0ZE9ERmwzNGV0d0tCZ1FEMjgrUVQ1VDlZanVoZkh0eHVuZUt1Nm10WFRxSnVMWFV0XG5Gc3ppdWNIWjVieU5qU3lTTXYzQWRJQkFWL1ZtLzRFei9BSXphbWplam91NDFJNHBUT21PRTN6K2pxRkdJSTdHXG5wcTlQMXkxRCt2MVVVZ1RsaUdPdmxVS0t2a1BlYTZYWnBlbEpHSDhNWUdrTDRDZDJpdlFCZ1ZTeWZudWtZSlpQXG5NZi9aQ0IrUFZRS0JnUUN4cjdwU1ZraUlQSi9zTEp4NVRPMWg0UDlVV1lLSlNCSi9sQW1mOEhZQWk1VXB2Y1NJXG44U2p2WENTUFdGYURjVWNta3NoS0pMUUl4VmtaTmxXUCt5M2haWEhNbmlCTlVDVEFmNkZlZmNpQ0g5WkhUSFNhXG5JYW9oRFpITDdxM0l4UWRnV1dFaHJGcUxvd0xpdkZmSnE4Zjh5KzdIMHArSU1Fd0ZsSllmczVrSjZRS0JnUUNBXG5xcjR3NTRiRHUyR3kvYjlZR3djYW42VGh6bVN2Qnh4QUs5c0FYa3gwSFZES1o3M0xScW9UZGgvRVpvL0Q1R2dMXG5EOGlOeFdseVc4N010R0tGZmo5SitUbHM0QitEREQrWG5RMUdpaFJaa1JJZ3RzTTZYSCtqNGg3VGJ5S3BabWo1XG5KNHFPdlNhazZpNlJNMjhjUW5XenV4RElGMEtRZUlxWUpMTHEvMktDS1FLQmdHbXhVK2FjN3RyVWgzeUF1WTF0XG5Eb0oxZWljS0FYQ2NZSUdWczkrTWU0V2VleVR2WkJ4ZXFTWWFvbmUwRzA4SlFUOXh0Q0hTUm9aUFhuYjBQTDhVXG42MTc3WFpmZHFwNmVGRGg1a09Yc3lDOUxRakVxWURGZ1F6Uk13V1kreWZwTDYvbzhJYmY1bzNkUzZtZStwdlUwXG5kazlwVG0yZERwZ1pzejVkNHRWa0NWTXBcbi0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0iOyAvLyAtLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQovLyAtLS0tLUJFR0lOIFBVQkxJQyBLRVktLS0tLQoKdmFyIFBVQkxJQ19LRVkgPSAiLS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS1cbk1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBOGtuOTFSMjVQTmJwRSt6eS81VGJcbnFsUjRCUzlwcmx2WmdnaGVnNnNNSDZhSzQ3TFM0TitnVWZ3UE8yODgzM3F6N2pGYWdxVXFTUUY3dWZRcmthZVpcblFnZDhnRFJmTi9RaDVySlRxc0pwUlhsYUZiNTdvclhYRllmYXJ3NXA5VTJ0aHVIZU95aSsyVlRWbXZFVExwVnNcbmY4cHFYVEp6aVNJT1BkMklERE5tRDYxdjBZZC9oVWEvTEtxNUlwbGhmbTU1Y3hxRURISS9KMGt2aVNxelM3V0NcbkNlTWQrcU5USmZFbEtNOU03bHpxQzl6dVBiNXdQcloraUxZajNIYmxmV3VqZTRSMGpnL1h4QytNa21QT01hVlFcbjNmSGl1cTUxTFZLWWtnRFNyc1NJenhqWk9zNUhJVHkvaTRhTjRrenM5RzJkdVlacXhyY1lOQ2Nxalp5Vk1ERnJcbnd3SURBUUFCXG4tLS0tLUVORCBQVUJMSUMgS0VZLS0tLS0iOyAvLyAtLS0tLUVORCBQVUJMSUMgS0VZLS0tLS0KCi8qKgogKiDlr7nosaHovazmjaLkuLprZXk9dmFsdWXlubbku6Um6L+e5o6l77yM5bm25Lula2V55ZCN56ew6L+b6KGM5Y2H5bqP5o6S5bqPCiAqIEBwYXJhbSB7T2JqZWN0fSBvYmoKICogQHJldHVybiB7U3RyaW5nfQogKiAqKi8KCmZ1bmN0aW9uIGdldEtleVZhbChvYmopIHsKICB2YXIgc3RyID0gJyc7CiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmopLnNvcnQoKTsKCiAgdmFyIF9pdGVyYXRvciA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKGtleXMpLAogICAgICBfc3RlcDsKCiAgdHJ5IHsKICAgIGZvciAoX2l0ZXJhdG9yLnMoKTsgIShfc3RlcCA9IF9pdGVyYXRvci5uKCkpLmRvbmU7KSB7CiAgICAgIHZhciBrZXkgPSBfc3RlcC52YWx1ZTsKICAgICAgc3RyICs9ICIiLmNvbmNhdChrZXksICI9IikuY29uY2F0KG9ialtrZXldLCAiJiIpOwogICAgfQogIH0gY2F0Y2ggKGVycikgewogICAgX2l0ZXJhdG9yLmUoZXJyKTsKICB9IGZpbmFsbHkgewogICAgX2l0ZXJhdG9yLmYoKTsKICB9CgogIHJldHVybiBzdHIuc3Vic3RyKDAsIHN0ci5sZW5ndGggLSAxKTsKfQovKioKICogUlNBIOengemSpeino+WvhgogKiBAcGFyYW0ge1N0cmluZ30gc3RyIOW+heino+WvhuaVsOaNrgogKiBAcGFyYW0ge1N0cmluZ30gcHJpdmF0ZUtleQogKiBAcmV0dXJuIHtTdHJpbmd9IOino+WvhuWQjuaVsOaNrgogKi8KCgpmdW5jdGlvbiBwcml2YXRlRGVjcnlwdChzdHIpIHsKICB2YXIgcHJpdmF0ZUtleSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogUFJJVkFURV9LRVk7CiAgY3J5cHRvci5zZXRQcml2YXRlS2V5KHByaXZhdGVLZXkpOwogIHJldHVybiBjcnlwdG9yLmRlY3J5cHQoc3RyKTsKfQovKioKICogUlNBIOWFrOmSpeino+WvhgogKiBAcGFyYW0ge1N0cmluZ30gc3RyIOW+heino+WvhuaVsOaNrgogKiBAcGFyYW0ge1N0cmluZ30gcHJpdmF0ZUtleQogKiBAcmV0dXJuIHtTdHJpbmd9IOino+WvhuWQjuaVsOaNrgogKi8KCgpmdW5jdGlvbiBwdWJsaWNEZWNyeXB0KHN0cikgewogIHZhciBwdWJsaWNLZXkgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IFBVQkxJQ19LRVk7CiAgY3J5cHRvci5zZXRQdWJsaWNLZXkocHVibGljS2V5KTsKICByZXR1cm4gY3J5cHRvci5kZWNyeXB0KHN0cik7Cn0KLyoqCiAqIFJTQSDnp4HpkqXliqDlr4Yo5Yqg562+KQogKiBAcGFyYW0ge1N0cmluZ30gc3RyIOW+heWKoOWvhuaVsOaNrgogKiBAcGFyYW0ge1N0cmluZ30gcHJpdmF0ZUtleQogKiBAcmV0dXJuIHtTdHJpbmd9IOWKoOWvhuWQjuaVsOaNrgogKi8KCgpmdW5jdGlvbiBwcml2YXRlRW5jcnlwdChzdHIpIHsKICB2YXIgcHJpdmF0ZUtleSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogUFJJVkFURV9LRVk7CiAgY3J5cHRvci5zZXRQcml2YXRlS2V5KHByaXZhdGVLZXkpOwogIHJldHVybiBjcnlwdG9yLmVuY3J5cHQoc3RyKTsKfQovKioKICogUlNBIOWKoOWvhgogKiBAcGFyYW0ge1N0cmluZ30gc3RyIOW+heWKoOWvhuaVsOaNrgogKiBAcGFyYW0ge1N0cmluZ30gcHVibGljS2V5IOWFrOmSpQogKiBAcmV0dXJuIHtTdHJpbmd9IOi/lOWbnuWKoOWvhuWtl+espuS4sgogKi8KCgpmdW5jdGlvbiBwdWJsaWNFbmNyeXB0KHN0cikgewogIHZhciBwdWJsaWNLZXkgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IFBVQkxJQ19LRVk7CiAgY3J5cHRvci5zZXRQdWJsaWNLZXkocHVibGljS2V5KTsKICByZXR1cm4gY3J5cHRvci5lbmNyeXB0KHN0cik7Cn0KLyoqCiAqIOS9v+eUqGpzcnNhc2lnbuetvuWQjQogKiBodHRwczovL2tqdXIuZ2l0aHViLmlvL2pzcnNhc2lnbi9hcGkvc3ltYm9scy9LSlVSLmNyeXB0by5TaWduYXR1cmUuaHRtbCNjb25zdHJ1Y3RvcgogKiBAcGFyYW0ge1N0cmluZ30gc3RyIOmcgOimgeWKoOWvhueahOWtl+espuS4sgogKiBAcmV0dXJuIHtTdHJpbmd9IHN0ciDnrb7lkI3miJDlip/nmoTlrZfnrKbkuLIKICogKiovCgoKZnVuY3Rpb24gc2lnblNIQTI1NihzdHIpIHsKICAvLyBSU0Egc2lnbmF0dXJlIGdlbmVyYXRpb24KICB2YXIgc2lnID0gbmV3IEtKVVIuY3J5cHRvLlNpZ25hdHVyZSh7CiAgICBhbGc6ICJTSEEyNTZ3aXRoUlNBIgogIH0pOwogIHNpZy5pbml0KFBSSVZBVEVfS0VZKTsKICBzaWcudXBkYXRlU3RyaW5nKHN0cik7CiAgcmV0dXJuIGhleHRvYjY0KHNpZy5zaWduKCkpOwp9Ci8qKgogKiBAcGFyYW0ge1N0cmluZ30gc3RyIOacquWKoOetvueahOaYjuaWhwogKiBAcGFyYW0ge1N0cmluZ30gc2lnblN0ciDlvoXpqozor4HnmoTnrb7lkI0KICogQHJldHVybiB7Qm9vbGVhbn0g562+5ZCN6aqM6K+B5piv5ZCm5oiQ5YqfCiAqICoqLwoKCmZ1bmN0aW9uIHNpZ25WZXJpZnkoc3RyLCBzaWduU3RyKSB7CiAgdmFyIHNpZyA9IG5ldyBLSlVSLmNyeXB0by5TaWduYXR1cmUoewogICAgYWxnOiAiU0hBMjU2d2l0aFJTQSIKICB9KTsKICBzaWcuaW5pdChQVUJMSUNfS0VZKTsKICBzaWcudXBkYXRlU3RyaW5nKHN0cik7CiAgdmFyIGlzVmFsaWQgPSBzaWcudmVyaWZ5KGI2NHRvaGV4KHNpZ25TdHIpKTsKICByZXR1cm4gaXNWYWxpZDsKfQoKZXhwb3J0IGRlZmF1bHQgewogIGdldEtleVZhbDogZ2V0S2V5VmFsLAogIHByaXZhdGVEZWNyeXB0OiBwcml2YXRlRGVjcnlwdCwKICBwcml2YXRlRW5jcnlwdDogcHJpdmF0ZUVuY3J5cHQsCiAgcHVibGljRW5jcnlwdDogcHVibGljRW5jcnlwdCwKICBwdWJsaWNEZWNyeXB0OiBwdWJsaWNEZWNyeXB0LAogIHNpZ25TSEEyNTY6IHNpZ25TSEEyNTYsCiAgc2lnblZlcmlmeTogc2lnblZlcmlmeQp9Ow=="},{"version":3,"sources":["/Users/nanxuan/Desktop/vue-frontend/src/assets/RSA.js"],"names":["JSEncrypt","KJUR","hextob64","b64tohex","cryptor","PRIVATE_KEY","PUBLIC_KEY","getKeyVal","obj","str","keys","Object","sort","key","substr","length","privateDecrypt","privateKey","setPrivateKey","decrypt","publicDecrypt","publicKey","setPublicKey","privateEncrypt","encrypt","publicEncrypt","signSHA256","sig","crypto","Signature","alg","init","updateString","sign","signVerify","signStr","isValid","verify"],"mappings":"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","sourcesContent":["import JSEncrypt from 'jsencrypt';\nimport {KJUR, hextob64, b64tohex} from 'jsrsasign'\n// Create the encryption object and set the key.\nvar cryptor = new JSEncrypt();\n// -----BEGIN RSA PRIVATE KEY-----\nconst PRIVATE_KEY = `-----BEGIN PRIVATE KEY-----\nMIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDySf3VHbk81ukT\n7PL/lNuqVHgFL2muW9mCCF6DqwwfporjstLg36BR/A87bzzferPuMVqCpSpJAXu5\n9CuRp5lCB3yANF839CHmslOqwmlFeVoVvnuitdcVh9qvDmn1Ta2G4d47KL7ZVNWa\n8RMulWx/ympdMnOJIg493YgMM2YPrW/Rh3+FRr8sqrkimWF+bnlzGoQMcj8nSS+J\nKrNLtYIJ4x36o1Ml8SUoz0zuXOoL3O49vnA+tn6ItiPcduV9a6N7hHSOD9fEL4yS\nY84xpVDd8eK6rnUtUpiSANKuxIjPGNk6zkchPL+Lho3iTOz0bZ25hmrGtxg0JyqN\nnJUwMWvDAgMBAAECggEAdunTt9YnxPFhYZMozEGd8iIU6c6UWqvfu88pvAumHp6Z\nihmJIC8BO1uviicVREWvq5bzai1v7Hba57Ar9gfA00RjWXTaytZ6EQSyxZs3GY7u\npL9hZMFEd9++d65mWKuwIAQZEwXzbS0SzUHGfVV+89U/kNAjHknlnX1tuTc8vzIW\ntnd71zcLaXLzzpJhgkEEGc1IoW7DYfFMuPrhtXk7y+zLIWFbv+7GKDFRJ+e8KTqr\n/swEGYshAmD9CRaqW3OGbLb65IOECZTDXFkUuWXSNjfiOYV38nVowq1NIYIQJxIH\nJwsToCYfgZQciDvtOh6lZAV8bgG+gwFoPldAM0MfmQKBgQD7Klx2vPwJ1a8UuD7v\nEVSPo5kyVr+AfT/CuZ5E1PFcyt7KMT4TsCWjOOSy4VrRHCyRpXwhBjI1uJV4hU4Q\nqDIpJIal9F2esOvLdZMa6xQ1UVhn6HpOFj39FT2P8BA1SYaDECcyldr7z+63WsQG\neAZofSjbocbx7iItdODFl34etwKBgQD28+QT5T9YjuhfHtxuneKu6mtXTqJuLXUt\nFsziucHZ5byNjSySMv3AdIBAV/Vm/4Ez/AIzamjejou41I4pTOmOE3z+jqFGII7G\npq9P1y1D+v1UUgTliGOvlUKKvkPea6XZpelJGH8MYGkL4Cd2ivQBgVSyfnukYJZP\nMf/ZCB+PVQKBgQCxr7pSVkiIPJ/sLJx5TO1h4P9UWYKJSBJ/lAmf8HYAi5UpvcSI\n8SjvXCSPWFaDcUcmkshKJLQIxVkZNlWP+y3hZXHMniBNUCTAf6FefciCH9ZHTHSa\nIaohDZHL7q3IxQdgWWEhrFqLowLivFfJq8f8y+7H0p+IMEwFlJYfs5kJ6QKBgQCA\nqr4w54bDu2Gy/b9YGwcan6ThzmSvBxxAK9sAXkx0HVDKZ73LRqoTdh/EZo/D5GgL\nD8iNxWlyW87MtGKFfj9J+Tls4B+DDD+XnQ1GihRZkRIgtsM6XH+j4h7TbyKpZmj5\nJ4qOvSak6i6RM28cQnWzuxDIF0KQeIqYJLLq/2KCKQKBgGmxU+ac7trUh3yAuY1t\nDoJ1eicKAXCcYIGVs9+Me4WeeyTvZBxeqSYaone0G08JQT9xtCHSRoZPXnb0PL8U\n6177XZfdqp6eFDh5kOXsyC9LQjEqYDFgQzRMwWY+yfpL6/o8Ibf5o3dS6me+pvU0\ndk9pTm2dDpgZsz5d4tVkCVMp\n-----END PRIVATE KEY-----`\n// -----END RSA PRIVATE KEY-----\n\n// -----BEGIN PUBLIC KEY-----\nconst PUBLIC_KEY = `-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA8kn91R25PNbpE+zy/5Tb\nqlR4BS9prlvZggheg6sMH6aK47LS4N+gUfwPO28833qz7jFagqUqSQF7ufQrkaeZ\nQgd8gDRfN/Qh5rJTqsJpRXlaFb57orXXFYfarw5p9U2thuHeOyi+2VTVmvETLpVs\nf8pqXTJziSIOPd2IDDNmD61v0Yd/hUa/LKq5Iplhfm55cxqEDHI/J0kviSqzS7WC\nCeMd+qNTJfElKM9M7lzqC9zuPb5wPrZ+iLYj3HblfWuje4R0jg/XxC+MkmPOMaVQ\n3fHiuq51LVKYkgDSrsSIzxjZOs5HITy/i4aN4kzs9G2duYZqxrcYNCcqjZyVMDFr\nwwIDAQAB\n-----END PUBLIC KEY-----`\n\n// -----END PUBLIC KEY-----\n\n/**\n * 对象转换为key=value并以&连接，并以key名称进行升序排序\n * @param {Object} obj\n * @return {String}\n * **/\nfunction getKeyVal(obj) {\n\tlet str = '';\n\tconst keys = Object.keys(obj).sort();\n\tfor (let key of keys) {\n\t\tstr += `${key}=${obj[key]}&`\n\t}\n\treturn str.substr(0, str.length - 1);\n}\n/**\n * RSA 私钥解密\n * @param {String} str 待解密数据\n * @param {String} privateKey\n * @return {String} 解密后数据\n */\nfunction privateDecrypt(str, privateKey = PRIVATE_KEY) {\n\tcryptor.setPrivateKey(privateKey);\n\treturn cryptor.decrypt(str)\n}\n/**\n * RSA 公钥解密\n * @param {String} str 待解密数据\n * @param {String} privateKey\n * @return {String} 解密后数据\n */\nfunction publicDecrypt(str, publicKey = PUBLIC_KEY) {\n\tcryptor.setPublicKey(publicKey);\n\treturn cryptor.decrypt(str)\n}\n/**\n * RSA 私钥加密(加签)\n * @param {String} str 待加密数据\n * @param {String} privateKey\n * @return {String} 加密后数据\n */\nfunction privateEncrypt(str, privateKey = PRIVATE_KEY) {\n\tcryptor.setPrivateKey(privateKey);\n\treturn cryptor.encrypt(str)\n}\n\n/**\n * RSA 加密\n * @param {String} str 待加密数据\n * @param {String} publicKey 公钥\n * @return {String} 返回加密字符串\n */\nfunction publicEncrypt(str, publicKey = PUBLIC_KEY) {\n\tcryptor.setPublicKey(publicKey);\n\treturn cryptor.encrypt(str);\n}\n/**\n * 使用jsrsasign签名\n * https://kjur.github.io/jsrsasign/api/symbols/KJUR.crypto.Signature.html#constructor\n * @param {String} str 需要加密的字符串\n * @return {String} str 签名成功的字符串\n * **/\nfunction signSHA256 (str){\n   // RSA signature generation\n   let sig = new KJUR.crypto.Signature({alg:\"SHA256withRSA\"});\n   sig.init(PRIVATE_KEY);\n   sig.updateString(str);\n   return hextob64(sig.sign());\n}\n/**\n * @param {String} str 未加签的明文\n * @param {String} signStr 待验证的签名\n * @return {Boolean} 签名验证是否成功\n * **/\nfunction signVerify (str, signStr) {\n\tlet sig = new KJUR.crypto.Signature({alg:\"SHA256withRSA\"});\n\tsig.init(PUBLIC_KEY);\n    sig.updateString(str);\n\tconst isValid = sig.verify(b64tohex(signStr));\n\treturn isValid\n}\n\nexport default {\n\tgetKeyVal,\n\tprivateDecrypt,\n\tprivateEncrypt,\n\tpublicEncrypt,\n\tpublicDecrypt,\n\tsignSHA256,\n\tsignVerify\n}\n"]}]}