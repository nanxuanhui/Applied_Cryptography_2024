{"remainingRequest":"/Users/nanxuan/Desktop/vue-frontend/node_modules/babel-loader/lib/index.js!/Users/nanxuan/Desktop/vue-frontend/node_modules/eslint-loader/index.js??ref--13-0!/Users/nanxuan/Desktop/vue-frontend/src/assets/decrypt.js","dependencies":[{"path":"/Users/nanxuan/Desktop/vue-frontend/src/assets/decrypt.js","mtime":1710256297000},{"path":"/Users/nanxuan/Desktop/vue-frontend/node_modules/cache-loader/dist/cjs.js","mtime":1712020702053},{"path":"/Users/nanxuan/Desktop/vue-frontend/node_modules/babel-loader/lib/index.js","mtime":1712020702448},{"path":"/Users/nanxuan/Desktop/vue-frontend/node_modules/eslint-loader/index.js","mtime":1712020702117}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tICIvVXNlcnMvbmFueHVhbi9EZXNrdG9wL3Z1ZS1mcm9udGVuZC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY2xhc3NDYWxsQ2hlY2siOwppbXBvcnQgX2NyZWF0ZUNsYXNzIGZyb20gIi9Vc2Vycy9uYW54dWFuL0Rlc2t0b3AvdnVlLWZyb250ZW5kL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVDbGFzcyI7CmltcG9ydCBBRVMgZnJvbSAnLi9BRVMuanMnOwppbXBvcnQgUlNBIGZyb20gJy4vUlNBLmpzJzsKaW1wb3J0IE1ENSBmcm9tICdjcnlwdG8tanMvbWQ1JzsKCnZhciBEZWNyeXB0ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICBmdW5jdGlvbiBEZWNyeXB0KGVuY3J5cHRlZEtleSwgZW5jcnlwdGVkRGF0YSkgewogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIERlY3J5cHQpOwoKICAgIC8vIOWvuWVuY3J5cHRlZEtleeWSjGVuY3J5cHRlZERhdGHop6Plr4bvvIzojrflj5bliqDlr4bliY3mlbDmja4KICAgIHRoaXMuZGVjcnlwdGVkID0gdGhpcy5nZXREZWNyeXB0ZWREYXRhKGVuY3J5cHRlZEtleSwgZW5jcnlwdGVkRGF0YSk7CiAgfQogIC8qKgogICAqIOino+WvhuaVsOaNrgogICAqIEBwYXJhbSB7U3RyaW5nfSBrZXkg5Yqg5a+G55qEZW5jcnlwdGVkS2V5CiAgICogQHBhcmFtIHtTdHJpbmd9IGRhdGEg5Yqg5a+G55qEZW5jcnlwdGVkRGF0YQogICAqIEByZXR1cm4ge1N0cmluZ30g5pyq5Yqg5a+G55qEZW5jcnlwdGVkRGF0YeeahGpzb27lrZfnrKbkuLIKICAgKiAqKi8KCgogIF9jcmVhdGVDbGFzcyhEZWNyeXB0LCBbewogICAga2V5OiAiZ2V0RGVjcnlwdGVkRGF0YSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RGVjcnlwdGVkRGF0YShrZXksIGRhdGEpIHsKICAgICAgLy8g5ZON5bqU5oql5paH6Kej5a+G5q2l6aqkOgogICAgICAvLyAxLiDkvb/nlKhSU0Hnp4HpkqXlr7llbmNyeXB0ZWRLZXnov5vooYzop6Plr4bvvIzlvpfliLDop6Plr4blkI7nmoRqc29u5a2X56ym5Liy77yM5YaN6Kej5p6Q5oiQ5a+56LGh5ZCO5b6X5Yiwa2V544CBaXbnmoTnmoTlgLwKICAgICAgdmFyIGRlY3J5cHRLZXkgPSBSU0EucHJpdmF0ZURlY3J5cHQoa2V5KTsKICAgICAgdmFyIG9iak1hcCA9IEpTT04ucGFyc2UoZGVjcnlwdEtleSk7IC8vIDIuIOS9v+eUqGtleeWSjGl25a+5ZW5jcnlwdGVkRGF0Yei/m+ihjEFFU+ino+Wvhu+8jOW+l+WIsOacquWKoOWvhueahGVuY3J5cHRlZERhdGHnmoRqc29u5a2X56ym5LiyCgogICAgICByZXR1cm4gQUVTLmRlY3J5cHRBRVMoZGF0YSwgb2JqTWFwLmtleSwgb2JqTWFwLml2KTsKICAgIH0gLy8g6aqM562+5q2l6aqkOiAKICAgIC8vIDEu5bCG6Kej5a+G5ZCO55qEZW5jcnlwdGVkRGF0YeeahGpzb27lrZfnrKbkuLLov5vooYxtZDXmk43kvZwKICAgIC8vIDIu5YaN5bCG5oql5paH5LitdGltZXN0YW1w562J5a2X5q615Lula2V5PXZhbHVl55qE5b2i5byP5oyJ54Wna2V55ZCN56ew6L+b6KGM5Y2H5bqP5o6S5bqP77yM5bm25LulJuaLvOaOpeWtl+espuS4suS4uuWtl+espuS4smEKICAgIC8vIDMu5bCGc2lnbmF0dXJl5L2/55SoUlNB5YWs6ZKl6Kej5a+G5b6X5Yiw5piO5paH5a2X56ym5LiyYu+8jOWvueavlGHkuI5i5piv5ZCm55u4562J44CCCiAgICAvLyDms6jmhI/liY3lkI7nq6/liqDnrb7pqoznrb7nmoTlrZfmrrXmmK/lkKbkuIDoh7TnmoQKCiAgICAvKioKICAgICAqIOaYr+WQpumAmui/h+etvuWQjQogICAgICogKiovCgogIH0sIHsKICAgIGtleTogImlzUGFzcyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gaXNQYXNzKHNpZ25EYXRhLCBzaWduYXR1cmUpIHsKICAgICAgdmFyIGRhdGEgPSB7CiAgICAgICAgZW5jcnlwdGVkRGF0YTogTUQ1KHRoaXMuZGVjcnlwdGVkKSwKICAgICAgICBjbGllbnRJRDogc2lnbkRhdGEuY2xpZW50SUQsCiAgICAgICAgc2VxdWVuY2VObzogc2lnbkRhdGEuc2VxdWVuY2VObywKICAgICAgICB0aW1lc3RhbXA6IHNpZ25EYXRhLnRpbWVzdGFtcCwKICAgICAgICB2ZXJzaW9uOiBzaWduRGF0YS52ZXJzaW9uCiAgICAgIH07IC8vIOWTjeW6lOaKpeaWh+WGheW+heetvuWQjeeahOaYjuaWh+aVsOaNrgoKICAgICAgdmFyIHJlc3BvbnNlU2lnblN0ciA9IFJTQS5nZXRLZXlWYWwoZGF0YSk7CiAgICAgIHZhciBpc1ZhbGlkID0gUlNBLnNpZ25WZXJpZnkocmVzcG9uc2VTaWduU3RyLCBzaWduYXR1cmUpOwogICAgICByZXR1cm4gaXNWYWxpZDsKICAgIH0KICB9XSk7CgogIHJldHVybiBEZWNyeXB0Owp9KCk7CgpleHBvcnQgeyBEZWNyeXB0IGFzIGRlZmF1bHQgfTs="},{"version":3,"sources":["/Users/nanxuan/Desktop/vue-frontend/src/assets/decrypt.js"],"names":["AES","RSA","MD5","Decrypt","encryptedKey","encryptedData","decrypted","getDecryptedData","key","data","decryptKey","privateDecrypt","objMap","JSON","parse","decryptAES","iv","signData","signature","clientID","sequenceNo","timestamp","version","responseSignStr","getKeyVal","isValid","signVerify"],"mappings":";;AAAA,OAAOA,GAAP,MAAgB,UAAhB;AACA,OAAOC,GAAP,MAAgB,UAAhB;AACA,OAAOC,GAAP,MAAgB,eAAhB;;IAEqBC,O;AACpB,mBAAYC,YAAZ,EAA0BC,aAA1B,EAAyC;AAAA;;AACxC;AACA,SAAKC,SAAL,GAAiB,KAAKC,gBAAL,CAAsBH,YAAtB,EAAoCC,aAApC,CAAjB;AACA;AAED;AACD;AACA;AACA;AACA;AACA;;;;;WACC,0BAAiBG,GAAjB,EAAsBC,IAAtB,EAA4B;AAC3B;AACA;AACA,UAAMC,UAAU,GAAGT,GAAG,CAACU,cAAJ,CAAmBH,GAAnB,CAAnB;AACA,UAAMI,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAWJ,UAAX,CAAf,CAJ2B,CAK3B;;AACA,aAAOV,GAAG,CAACe,UAAJ,CAAeN,IAAf,EAAqBG,MAAM,CAACJ,GAA5B,EAAiCI,MAAM,CAACI,EAAxC,CAAP;AACA,K,CACD;AACA;AACA;AACA;AACA;;AACA;AACD;AACA;;;;WACC,gBAAOC,QAAP,EAAiBC,SAAjB,EAA4B;AAC3B,UAAMT,IAAI,GAAG;AACZJ,QAAAA,aAAa,EAAEH,GAAG,CAAC,KAAKI,SAAN,CADN;AAEZa,QAAAA,QAAQ,EAAEF,QAAQ,CAACE,QAFP;AAGZC,QAAAA,UAAU,EAAEH,QAAQ,CAACG,UAHT;AAIZC,QAAAA,SAAS,EAAEJ,QAAQ,CAACI,SAJR;AAKZC,QAAAA,OAAO,EAAEL,QAAQ,CAACK;AALN,OAAb,CAD2B,CAQ3B;;AACA,UAAMC,eAAe,GAAGtB,GAAG,CAACuB,SAAJ,CAAcf,IAAd,CAAxB;AACA,UAAMgB,OAAO,GAAGxB,GAAG,CAACyB,UAAJ,CAAeH,eAAf,EAAgCL,SAAhC,CAAhB;AACA,aAAOO,OAAP;AACA;;;;;;SAxCmBtB,O","sourcesContent":["import AES from './AES.js'\nimport RSA from './RSA.js'\nimport MD5 from 'crypto-js/md5';\n\nexport default class Decrypt {\n\tconstructor(encryptedKey, encryptedData) {\n\t\t// 对encryptedKey和encryptedData解密，获取加密前数据\n\t\tthis.decrypted = this.getDecryptedData(encryptedKey, encryptedData)\n\t}\n\n\t/**\n\t * 解密数据\n\t * @param {String} key 加密的encryptedKey\n\t * @param {String} data 加密的encryptedData\n\t * @return {String} 未加密的encryptedData的json字符串\n\t * **/\n\tgetDecryptedData(key, data) {\n\t\t// 响应报文解密步骤:\n\t\t// 1. 使用RSA私钥对encryptedKey进行解密，得到解密后的json字符串，再解析成对象后得到key、iv的的值\n\t\tconst decryptKey = RSA.privateDecrypt(key)\n\t\tconst objMap = JSON.parse(decryptKey)\n\t\t// 2. 使用key和iv对encryptedData进行AES解密，得到未加密的encryptedData的json字符串\n\t\treturn AES.decryptAES(data, objMap.key, objMap.iv);\n\t}\n\t// 验签步骤: \n\t// 1.将解密后的encryptedData的json字符串进行md5操作\n\t// 2.再将报文中timestamp等字段以key=value的形式按照key名称进行升序排序，并以&拼接字符串为字符串a\n\t// 3.将signature使用RSA公钥解密得到明文字符串b，对比a与b是否相等。\n\t// 注意前后端加签验签的字段是否一致的\n\t/**\n\t * 是否通过签名\n\t * **/\n\tisPass(signData, signature) {\n\t\tconst data = {\n\t\t\tencryptedData: MD5(this.decrypted),\n\t\t\tclientID: signData.clientID,\n\t\t\tsequenceNo: signData.sequenceNo,\n\t\t\ttimestamp: signData.timestamp,\n\t\t\tversion: signData.version\n\t\t}\n\t\t// 响应报文内待签名的明文数据\n\t\tconst responseSignStr = RSA.getKeyVal(data);\n\t\tconst isValid = RSA.signVerify(responseSignStr, signature)\n\t\treturn isValid\n\t}\n}"]}]}