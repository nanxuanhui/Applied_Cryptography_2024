{"remainingRequest":"/Users/nanxuan/Desktop/vue-frontend/node_modules/babel-loader/lib/index.js!/Users/nanxuan/Desktop/vue-frontend/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/nanxuan/Desktop/vue-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nanxuan/Desktop/vue-frontend/src/views/FileDownload.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/nanxuan/Desktop/vue-frontend/src/views/FileDownload.vue","mtime":1710490298000},{"path":"/Users/nanxuan/Desktop/vue-frontend/node_modules/cache-loader/dist/cjs.js","mtime":1712020702053},{"path":"/Users/nanxuan/Desktop/vue-frontend/node_modules/babel-loader/lib/index.js","mtime":1712020702448},{"path":"/Users/nanxuan/Desktop/vue-frontend/node_modules/cache-loader/dist/cjs.js","mtime":1712020702053},{"path":"/Users/nanxuan/Desktop/vue-frontend/node_modules/vue-loader/lib/index.js","mtime":1712020702552}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["FileDownload.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <v-app>\n    <v-container>\n      <v-row>\n        <v-col cols=\"12\">\n          <v-card>\n            <v-card-title>File Download Selection</v-card-title>\n            <div v-if=\"userstatus === '1'\">\n              <h3>upload your file to Decrypt</h3>\n    <input type=\"file\"  @change=\"handleEncryptedFileUpload\" >\n  </div>\n            <v-card-text>\n              <!-- <v-btn color=\"success\" @click=\"dialog = true\">Upload File</v-btn> -->\n              <v-btn color=\"success\" @click=\"dialog = true\" v-if=\"userRole === '1'\">Upload File</v-btn>\n\n              <v-data-table :headers=\"headers\" :items=\"files\" :items-per-page=\"5\" class=\"elevation-1\">\n                <template v-slot:item.actions=\"{ item }\">\n                  <!-- <v-btn color=\"primary\" @click=\"() => download(item)\">Encrypt & Download</v-btn> -->\n                  <v-btn color=\"primary\" @click=\"() => download(item)\">Download</v-btn>\n                  <!-- <v-btn color=\"secondary\" @click=\"() => download(item)\">Decrypt & Download</v-btn> -->\n                </template>\n              </v-data-table>\n            </v-card-text>\n          </v-card>\n        </v-col>\n      </v-row>\n    </v-container>\n    <v-dialog v-model=\"dialog\" persistent max-width=\"600px\">\n      <v-card>\n        <v-card-title>Upload a file</v-card-title>\n        <v-card-text>\n          <input type=\"file\" @change=\"handleFileUpload\">\n        </v-card-text>\n        <v-card-actions>\n          <v-spacer></v-spacer>\n          <v-btn color=\"blue darken-1\" text @click=\"dialog = false\">Cancel</v-btn>\n          <v-btn color=\"blue darken-1\" text @click=\"uploadFile\">Upload</v-btn>\n         \n        </v-card-actions>\n      </v-card>\n    </v-dialog>\n  </v-app>\n</template>\n\n<script>\nimport axios from 'axios';\nimport JSEncrypt from 'jsencrypt';\nimport CryptoJS from 'crypto-js';\n\nexport default {\n  data() {\n    return {\n      dialog: false,\n      selectedFile: null,\n      files: [],\n      headers: [\n        { text: 'Name', value: 'name' },\n        // { text: 'Size', value: 'size' },\n        { text: 'Actions', value: 'actions', sortable: false },\n      ],\n      userRole: localStorage.getItem(\"role\"), // 从localStorage获取用户角色\n      userstatus: localStorage.getItem(\"status\"), // 从localStorage获取用户角色\n    };\n  },\n  mounted() {\n    this.fetchFiles();\n    \n  },\n  methods: {\n    download(file) {\n      const user_status =localStorage.getItem(\"status\")\n      console.log(user_status)\n      if(user_status===\"0\"){\n        this.downloadFile(file)\n        return\n      }\n      window.open(file.url, '_blank');\n    },\n    decryptDownloadFile(file) {\n      const PRIVATE_KEY = `-----BEGIN PRIVATE KEY-----\nMIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDySf3VHbk81ukT\n7PL/lNuqVHgFL2muW9mCCF6DqwwfporjstLg36BR/A87bzzferPuMVqCpSpJAXu5\n9CuRp5lCB3yANF839CHmslOqwmlFeVoVvnuitdcVh9qvDmn1Ta2G4d47KL7ZVNWa\n8RMulWx/ympdMnOJIg493YgMM2YPrW/Rh3+FRr8sqrkimWF+bnlzGoQMcj8nSS+J\nKrNLtYIJ4x36o1Ml8SUoz0zuXOoL3O49vnA+tn6ItiPcduV9a6N7hHSOD9fEL4yS\nY84xpVDd8eK6rnUtUpiSANKuxIjPGNk6zkchPL+Lho3iTOz0bZ25hmrGtxg0JyqN\nnJUwMWvDAgMBAAECggEAdunTt9YnxPFhYZMozEGd8iIU6c6UWqvfu88pvAumHp6Z\nihmJIC8BO1uviicVREWvq5bzai1v7Hba57Ar9gfA00RjWXTaytZ6EQSyxZs3GY7u\npL9hZMFEd9++d65mWKuwIAQZEwXzbS0SzUHGfVV+89U/kNAjHknlnX1tuTc8vzIW\ntnd71zcLaXLzzpJhgkEEGc1IoW7DYfFMuPrhtXk7y+zLIWFbv+7GKDFRJ+e8KTqr\n/swEGYshAmD9CRaqW3OGbLb65IOECZTDXFkUuWXSNjfiOYV38nVowq1NIYIQJxIH\nJwsToCYfgZQciDvtOh6lZAV8bgG+gwFoPldAM0MfmQKBgQD7Klx2vPwJ1a8UuD7v\nEVSPo5kyVr+AfT/CuZ5E1PFcyt7KMT4TsCWjOOSy4VrRHCyRpXwhBjI1uJV4hU4Q\nqDIpJIal9F2esOvLdZMa6xQ1UVhn6HpOFj39FT2P8BA1SYaDECcyldr7z+63WsQG\neAZofSjbocbx7iItdODFl34etwKBgQD28+QT5T9YjuhfHtxuneKu6mtXTqJuLXUt\nFsziucHZ5byNjSySMv3AdIBAV/Vm/4Ez/AIzamjejou41I4pTOmOE3z+jqFGII7G\npq9P1y1D+v1UUgTliGOvlUKKvkPea6XZpelJGH8MYGkL4Cd2ivQBgVSyfnukYJZP\nMf/ZCB+PVQKBgQCxr7pSVkiIPJ/sLJx5TO1h4P9UWYKJSBJ/lAmf8HYAi5UpvcSI\n8SjvXCSPWFaDcUcmkshKJLQIxVkZNlWP+y3hZXHMniBNUCTAf6FefciCH9ZHTHSa\nIaohDZHL7q3IxQdgWWEhrFqLowLivFfJq8f8y+7H0p+IMEwFlJYfs5kJ6QKBgQCA\nqr4w54bDu2Gy/b9YGwcan6ThzmSvBxxAK9sAXkx0HVDKZ73LRqoTdh/EZo/D5GgL\nD8iNxWlyW87MtGKFfj9J+Tls4B+DDD+XnQ1GihRZkRIgtsM6XH+j4h7TbyKpZmj5\nJ4qOvSak6i6RM28cQnWzuxDIF0KQeIqYJLLq/2KCKQKBgGmxU+ac7trUh3yAuY1t\nDoJ1eicKAXCcYIGVs9+Me4WeeyTvZBxeqSYaone0G08JQT9xtCHSRoZPXnb0PL8U\n6177XZfdqp6eFDh5kOXsyC9LQjEqYDFgQzRMwWY+yfpL6/o8Ibf5o3dS6me+pvU0\ndk9pTm2dDpgZsz5d4tVkCVMp\n-----END PRIVATE KEY-----`\n  axios.get(file.url, { responseType: 'json' })\n    .then(response => {\n      const encryptedData = response.data;\n      const decrypt = new JSEncrypt();\n      decrypt.setPrivateKey(PRIVATE_KEY);\n      const decryptedAESKey = decrypt.decrypt(encryptedData.key);\n      const decryptedContent = CryptoJS.AES.decrypt(encryptedData.content, CryptoJS.enc.Utf8.parse(decryptedAESKey), {\n        mode: CryptoJS.mode.ECB,\n        padding: CryptoJS.pad.Pkcs7\n      }).toString(CryptoJS.enc.Utf8);\n\n      const blob = new Blob([decryptedContent], { type: \"text/plain\" });\n      const downloadUrl = window.URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = downloadUrl;\n      link.download = \"decrypted_\" + file.name;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    })\n    .catch(error => console.error('Error downloading file:', error));\n},\n    fetchFiles() {\n      // 请替换为你的文件列表 API\n      axios.get('http://localhost:7529/api/filelist')\n        .then(response => {\n          this.files = response.data.map(file => ({\n            ...file,\n            size: 'Unknown' // 假设文件大小未知\n          }));\n        })\n        .catch(error => console.error('Error fetching files:', error));\n    },\n    downloadFile(file) {\n      const PUBLIC_KEY = `-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA8kn91R25PNbpE+zy/5Tb\nqlR4BS9prlvZggheg6sMH6aK47LS4N+gUfwPO28833qz7jFagqUqSQF7ufQrkaeZ\nQgd8gDRfN/Qh5rJTqsJpRXlaFb57orXXFYfarw5p9U2thuHeOyi+2VTVmvETLpVs\nf8pqXTJziSIOPd2IDDNmD61v0Yd/hUa/LKq5Iplhfm55cxqEDHI/J0kviSqzS7WC\nCeMd+qNTJfElKM9M7lzqC9zuPb5wPrZ+iLYj3HblfWuje4R0jg/XxC+MkmPOMaVQ\n3fHiuq51LVKYkgDSrsSIzxjZOs5HITy/i4aN4kzs9G2duYZqxrcYNCcqjZyVMDFr\nwwIDAQAB\n-----END PUBLIC KEY-----`\n  axios.get(file.url, { responseType: 'arraybuffer' })\n    .then(response => {\n      const AESKey = CryptoJS.lib.WordArray.random(16).toString(CryptoJS.enc.Hex);\n      const wordArray = CryptoJS.lib.WordArray.create(response.data);\n      const encryptedContent = CryptoJS.AES.encrypt(wordArray, CryptoJS.enc.Utf8.parse(AESKey), {\n        mode: CryptoJS.mode.ECB,\n        padding: CryptoJS.pad.Pkcs7\n      }).toString();\n\n      const encrypt = new JSEncrypt();\n      encrypt.setPublicKey(PUBLIC_KEY);\n      const encryptedAESKey = encrypt.encrypt(AESKey);\n\n      const encryptedData = JSON.stringify({\n        key: encryptedAESKey,\n        content: encryptedContent\n      });\n\n      const blob = new Blob([encryptedData], { type: \"application/json\" });\n      const downloadUrl = window.URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = downloadUrl;\n      link.download = \"encrypted_\" + file.name;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    })\n    .catch(error => console.error('Error downloading file:', error));\n},\n    handleFileUpload(event) {\n      this.selectedFile = event.target.files[0];\n    },\n    uploadFile() {\n      const formData = new FormData();\n      formData.append('file', this.selectedFile);\n      // 请替换为你的文件上传 API\n      axios.post('http://localhost:7529/api/upload', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        },\n      })\n        .then(() => {\n          this.dialog = false;\n          this.fetchFiles();\n          console.log('File uploaded successfully');\n        })\n        .catch(error => console.error('Error uploading file:', error));\n    },\n\n    handleEncryptedFileUpload(event) {\n      const file = event.target.files[0];\n      if (!file) {\n        console.log(\"file\")\n        return;\n      }\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        const encryptedData = JSON.parse(e.target.result);\n        this.decryptFile(encryptedData, file.name);\n      };\n      reader.readAsText(file);\n    },\n    base64ToBlob(base64, contentType) {\n    const sliceSize = 512;\n    const byteCharacters = atob(base64);\n    const byteArrays = [];\n\n    for (let offset = 0; offset < byteCharacters.length; offset += sliceSize) {\n      const slice = byteCharacters.slice(offset, offset + sliceSize);\n\n      const byteNumbers = new Array(slice.length);\n      for (let i = 0; i < slice.length; i++) {\n        byteNumbers[i] = slice.charCodeAt(i);\n      }\n\n      const byteArray = new Uint8Array(byteNumbers);\n      byteArrays.push(byteArray);\n    }\n\n    return new Blob(byteArrays, {type: contentType});\n  },\n    decryptFile(encryptedData, fileName) {\n\n     const PRIVATE_KEY = `-----BEGIN PRIVATE KEY-----\nMIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDySf3VHbk81ukT\n7PL/lNuqVHgFL2muW9mCCF6DqwwfporjstLg36BR/A87bzzferPuMVqCpSpJAXu5\n9CuRp5lCB3yANF839CHmslOqwmlFeVoVvnuitdcVh9qvDmn1Ta2G4d47KL7ZVNWa\n8RMulWx/ympdMnOJIg493YgMM2YPrW/Rh3+FRr8sqrkimWF+bnlzGoQMcj8nSS+J\nKrNLtYIJ4x36o1Ml8SUoz0zuXOoL3O49vnA+tn6ItiPcduV9a6N7hHSOD9fEL4yS\nY84xpVDd8eK6rnUtUpiSANKuxIjPGNk6zkchPL+Lho3iTOz0bZ25hmrGtxg0JyqN\nnJUwMWvDAgMBAAECggEAdunTt9YnxPFhYZMozEGd8iIU6c6UWqvfu88pvAumHp6Z\nihmJIC8BO1uviicVREWvq5bzai1v7Hba57Ar9gfA00RjWXTaytZ6EQSyxZs3GY7u\npL9hZMFEd9++d65mWKuwIAQZEwXzbS0SzUHGfVV+89U/kNAjHknlnX1tuTc8vzIW\ntnd71zcLaXLzzpJhgkEEGc1IoW7DYfFMuPrhtXk7y+zLIWFbv+7GKDFRJ+e8KTqr\n/swEGYshAmD9CRaqW3OGbLb65IOECZTDXFkUuWXSNjfiOYV38nVowq1NIYIQJxIH\nJwsToCYfgZQciDvtOh6lZAV8bgG+gwFoPldAM0MfmQKBgQD7Klx2vPwJ1a8UuD7v\nEVSPo5kyVr+AfT/CuZ5E1PFcyt7KMT4TsCWjOOSy4VrRHCyRpXwhBjI1uJV4hU4Q\nqDIpJIal9F2esOvLdZMa6xQ1UVhn6HpOFj39FT2P8BA1SYaDECcyldr7z+63WsQG\neAZofSjbocbx7iItdODFl34etwKBgQD28+QT5T9YjuhfHtxuneKu6mtXTqJuLXUt\nFsziucHZ5byNjSySMv3AdIBAV/Vm/4Ez/AIzamjejou41I4pTOmOE3z+jqFGII7G\npq9P1y1D+v1UUgTliGOvlUKKvkPea6XZpelJGH8MYGkL4Cd2ivQBgVSyfnukYJZP\nMf/ZCB+PVQKBgQCxr7pSVkiIPJ/sLJx5TO1h4P9UWYKJSBJ/lAmf8HYAi5UpvcSI\n8SjvXCSPWFaDcUcmkshKJLQIxVkZNlWP+y3hZXHMniBNUCTAf6FefciCH9ZHTHSa\nIaohDZHL7q3IxQdgWWEhrFqLowLivFfJq8f8y+7H0p+IMEwFlJYfs5kJ6QKBgQCA\nqr4w54bDu2Gy/b9YGwcan6ThzmSvBxxAK9sAXkx0HVDKZ73LRqoTdh/EZo/D5GgL\nD8iNxWlyW87MtGKFfj9J+Tls4B+DDD+XnQ1GihRZkRIgtsM6XH+j4h7TbyKpZmj5\nJ4qOvSak6i6RM28cQnWzuxDIF0KQeIqYJLLq/2KCKQKBgGmxU+ac7trUh3yAuY1t\nDoJ1eicKAXCcYIGVs9+Me4WeeyTvZBxeqSYaone0G08JQT9xtCHSRoZPXnb0PL8U\n6177XZfdqp6eFDh5kOXsyC9LQjEqYDFgQzRMwWY+yfpL6/o8Ibf5o3dS6me+pvU0\ndk9pTm2dDpgZsz5d4tVkCVMp\n-----END PRIVATE KEY-----`\n\n        // 使用私钥解密AES密钥\n  const decrypt = new JSEncrypt();\n  decrypt.setPrivateKey(PRIVATE_KEY);\n  const decryptedAESKey = decrypt.decrypt(encryptedData.key);\n\n  // 使用AES密钥解密文件内容\n  const decryptedContent = CryptoJS.AES.decrypt(encryptedData.content, CryptoJS.enc.Utf8.parse(decryptedAESKey), {\n    mode: CryptoJS.mode.ECB,\n    padding: CryptoJS.pad.Pkcs7\n  });\n\n  // 转换为Base64，避免UTF-8解码错误\n  const decryptedText = CryptoJS.enc.Base64.stringify(decryptedContent);\n\n  // 将Base64字符串转换为Blob对象\n  const blob = this.base64ToBlob(decryptedText, 'application/octet-stream');\n  const downloadUrl = URL.createObjectURL(blob);\n  const downloadLink = document.createElement('a');\n  downloadLink.href = downloadUrl;\n  downloadLink.download = `decrypted_${fileName}`;\n  document.body.appendChild(downloadLink);\n  downloadLink.click();\n  document.body.removeChild(downloadLink);\n    },\n  \n  }\n};\n</script>\n\n<style scoped>\n</style>\n"],"sourceRoot":"src/views"}]}